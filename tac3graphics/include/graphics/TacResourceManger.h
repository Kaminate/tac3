#pragma once
#include <map>
#include <string>

namespace Tac
{
  class Geometry;
  class Shader;
  class Texture;
  class Material;

  struct ResourceManager
  {
    ResourceManager();
    ~ResourceManager();
    void Clear();


    const static std::string mDefaultUnitCube;
    const static std::string mDefaultUnitSphere;
    const static std::string mDefaultNDCQuad;

    const static std::string mDefaultTexture1x1White;
    const static std::string mDefaultTexture1x1Black;
    const static std::string mDefaultTexture1x1Red;
    const static std::string mDefaultTexture1x1Green;
    const static std::string mDefaultTexture1x1Blue;
    void LoadDefaults();

    // TODO(nathan): replace with CreateGeometry
    void AddGeometry(Geometry* newGeometry);
    Geometry * GetGeometry(const std::string & name);
    // does not delete
    void RemGeometry(Geometry * toRemove);
    void RemGeometry(const std::string & name);

    void AddShader(Shader* toAdd);
    // does not delete
    void RemShader(Shader* toRem);
    void RemShader(const std::string & name );
    Shader * GetShader(const std::string & name);
    Shader * GetShaderByHash( size_t hash ); // hash generated by Shader::GenerateHash
    void ReloadShaders();

    void AddTexture( Texture * toAdd );
    void RemTexture( Texture * toRem ); // does not delete
    void RemTexture( const std::string & name ); // does not delete
    Texture * GetTexture(const std::string & name);


    void AddMaterial( Material * toAdd );
    void RemMaterial( Material * toRem ); // does not delete
    void RemMaterial( const std::string & name ); // does not delete
    Material * GetMaterial(const std::string & name);



  private:

    std::map<std::string, Geometry*> mGeometries; // owned
    std::map<std::string, Shader*> mShaders; // owned
    std::map<std::string, Texture*> mTextures; // owned
    std::map<std::string, Material*> mMaterials; // owned
  };
}
